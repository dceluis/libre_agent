###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> Openrouter {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"deepseek/deepseek-r1-distill-llama-70b\"\n    headers {\n      \"HTTP-Referer\" \"YOUR-SITE-URL\" // Optional\n      \"X-Title\" \"YOUR-TITLE\" // Optional\n    }\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.73.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "main.baml": "class ChatTool {\n  name \"ChatTool\"\n  content string\n  parse_mode ParseMode\n}\n\nclass MemoryCreateTool {\n  name \"MemoryCreateTool\"\n  unit_name string\n  content string\n  priority_level PriorityLevel\n  temporal_scope TemporalScope\n  role Role\n}\n\n\nclass MemoryUpdateTool {\n  name \"MemoryUpdateTool\"\n  memory_id string\n  content string?\n  priority_level PriorityLevel?\n  temporal_scope TemporalScope?\n}\n\nclass MemoryDeleteTool {\n  name \"MemoryDeleteTool\"\n  memory_id string\n}\n\nenum ToolName {\n  MemoryCreateTool\n  MemoryUpdateTool\n  MemoryDeleteTool\n  ChatTool\n}\n\nenum Role {\n  Reflection\n  Episodic\n  Semantic\n  Procedural\n}\n\nenum ParseMode {\n  Plaintext\n  Markdown\n}\n\nenum PriorityLevel {\n  CORE\n  HIGH\n  MEDIUM\n  LOW\n  BACKGROUND\n}\n\nenum TemporalScope {\n  ShortTerm\n  LongTerm\n}\n\nfunction UseTools(content: string) -> (ChatTool | MemoryUpdateTool | MemoryCreateTool | MemoryDeleteTool)[] {\n  client Openrouter\n  prompt #\"\n    {{ content }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n",
}

def get_baml_files():
    return file_map